# Trigger the action when changes are pushed to the master branch
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
    
      - name: Debug AWS Account ID
        run: echo "AWS_ACCOUNT_ID:${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Debug AWS Region
        run: echo "AWS_REGION:${{ secrets.AWS_REGION }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Set your AWS region here
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-account-id: ${{ secrets.AWS_ACCOUNT_ID }}

      # Optional: Debug AWS Account ID and Region (Comment out in production)
      - name: Debug AWS Account ID
        run: echo "AWS_ACCOUNT_ID:${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Debug AWS Region
        run: echo "AWS_REGION:us-east-1"
      

      # Step 3: Log in to Amazon ECR using AWS credentials
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: 'public'
          registries: 657093102493
          mask-password: true 

      # Step 4: Build, tag, and push the WebApp Docker image
      - name: Build and push the webapp Docker image
        run: |
          # Define the ECR repository URI
          ECR_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/webapp
          
          # Build the webapp image
          docker build -t webapp .
          
          # Tag the image for ECR
          docker tag webapp:latest $ECR_URI:latest
          
          # Push the image to ECR
          docker push $ECR_URI:latest

      # Step 5: Build, tag, and push the MySQL Docker image
      - name: Build and push the MySQL Docker image
        run: |
          # Define the ECR repository URI
          ECR_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/mysql
          
          # Pull the official MySQL image
          docker pull mysql:latest
          
          # Tag the image for ECR
          docker tag mysql:latest $ECR_URI:latest
          
          # Push the image to ECR
          docker push $ECR_URI:latest
